框架文件夹说明：
base：基础的代码，封装底层的请求方法，扩展的协议类型，ZMQ请求的东西
config：配置的信息
data：测试过程中用到的一些数据
utils：工具类
common：存放公共的方法
tests：测试用例
report：测试报告
log：生成的日志


本节思想：
    把所有测试数据都放到excel中，借助pytest框架中的参数化来批量执行测试
    包含需处理的场景：
    （1）前置条件
    （2）token值的关联：登录返回的token值需在下次请求中携带
    （3）上下参数的关联：bookID


注意上下文关联：
1、登录成功后的token
    本节token存放在请求头header中
2、业务的动态参数


本节老师实现的思路：
（1）获取所有的数据
    def getExcelDatas(self):
（2）判断是否执行
	def runs(self):
（3）非空的请求参数做反序列化处理
    def params(self,params)
（4）请求头做反序列化处理
    def headers(self,headers)
（5）编写测试用例，写post和get请求
    if datas[ExcelVar.method]=='get'
（6）获取关联的前置测试用例
    def case_prev(self,casePrev)
（7）执行前置测试用例
    def runPreCase(self,preCase,headers)
（8）获取token值
    preResult = r.json()['access_token']
（9）替换token值
    header = self.preReplaceHeaders(preResult, headers)
（10）保存添加书籍的bookID
    writeContent(content=r.json()[0]['datas']['id'])
（11）读取bookID替换掉请求参数有bookID的变量
    url = str(datas[ExcelVar.caseUrl]).replace('{bookID}', readContent())
（12）两个get请求，一个有参数替换，一个没有参数替换，要做处理
    if 'books' in datas[ExcelVar.caseUrl]
（13）测试报告：
    allureframework框架，pytest以及testng基于它都可以生成漂亮的测试报告。
    allure生成报告：这个就厉害了，我本人觉得这个工具真的是超级牛逼，生成的报告也超级炫酷。实际上它是一个report框架，支持各种语言的各种测试框架，
而且可以集成到jenkins上使用。

    步骤：
    （1）下载allure，网址https://github.com/allure-framework/allure2/releases
    （2）下载allure-pytest，pip install allure-pytest
    （3）执行命令：
        pytest.main(["-s", "-v", "test_login_token_book.py", "--alluredir", "./report/result"])
	    import subprocess
	    subprocess.call('allure generate report/result/ -o report/html --clean', shell=True)
	    subprocess.call('allure open -h 127.0.0.1 -p  8088 ./report/html', shell=True)

    allure在pycharm下运行出现以下乱码的提示时如何解决:
        解决方法：pycharm的环境没有配置到系统环境path引起的
        path加入系统环境即可。
        例如：E:\Program Files\JetBrains\PyCharm 2017.3.3\bin加入到path系统环境变量

执行结果：
127.0.0.1 - - [17/Sep/2020 12:53:02] "POST /auth HTTP/1.1" 200 -
127.0.0.1 - - [17/Sep/2020 12:53:02] "GET /v1/api/books HTTP/1.1" 200 -
127.0.0.1 - - [17/Sep/2020 12:53:02] "POST /auth HTTP/1.1" 200 -
127.0.0.1 - - [17/Sep/2020 12:53:02] "POST /v1/api/books HTTP/1.1" 200 -
127.0.0.1 - - [17/Sep/2020 12:53:02] "POST /auth HTTP/1.1" 200 -
127.0.0.1 - - [17/Sep/2020 12:53:02] "GET /v1/api/book/3 HTTP/1.1" 200 -
127.0.0.1 - - [17/Sep/2020 12:53:02] "POST /auth HTTP/1.1" 200 -
127.0.0.1 - - [17/Sep/2020 12:53:02] "PUT /v1/api/book/3 HTTP/1.1" 200 -
127.0.0.1 - - [17/Sep/2020 12:53:02] "POST /auth HTTP/1.1" 200 -
127.0.0.1 - - [17/Sep/2020 12:53:02] "DELETE /v1/api/book/3 HTTP/1.1" 200 -

以上可见：每次请求之前，都要先登录：POST /auth HTTP/1.1，获取token，再替换token


excel表中请求参数要用双引号
excel中的数据都是str，要用的时候，必须是先json.loads转换成python格式的数据，再在请求时传递给json，作为请求参数

改善点：
1、优化了替换token变量值的函数，使其更合理
2、将前置测试用例执行封装放在了operationExcel.py中，简化测试代码
3、将headers和params的反序列化处理封装放在了operationExcel.py中，简化测试代码
4、优化了根据前置测试条件找到关联的前置测试用例的方法，使其更合理
5、解决了post,post,post,get请求模式，纠正为了post,post,get。因为前置条件的测试用例执行放在最前面，怎么样都会执行一次。
   放在operationExcel.py中，就可解决，先执行一次的原因。